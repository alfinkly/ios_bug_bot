from aiogram import Router, F
from aiogram.enums import ParseMode
from aiogram.filters import Command
from aiogram.filters.callback_data import CallbackData
from aiogram.types import Message, CallbackQuery, InlineQuery, InlineQueryResultArticle, InputTextMessageContent
from aiogram.utils.i18n import I18n

from database.database import ORM
from database.models import User
from services.analyzer.nand import NandList
from services.telegram.filters.role import RoleFilter
from services.telegram.misc.callbacks import HomeCallback, LangChangeCallBack
from services.telegram.misc.keyboards import Keyboards

router = Router()
router.message.filter(RoleFilter(roles=["admin", "user"]))
router.callback_query.filter(RoleFilter(roles=["admin", "user"]))


@router.message(F.text == "–ì–ª–∞–≤–Ω–∞—è")
@router.message(Command("start"))
async def home(message: Message, user: User, i18n: I18n):
    await message.answer(i18n.gettext("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{}üôÇü§ùüèº"
                                      "\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–±–æ–µ–≤"
                                      # "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨"
                                      "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨",
                                      locale=user.lang).format(user.username),
                         reply_markup=Keyboards.home(i18n, user)
                         )


@router.callback_query(HomeCallback.filter(F.action == "instruction"))
async def instruction(callback: CallbackQuery, user, i18n: I18n):
    await callback.message.edit_text(
        i18n.gettext("–î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ Panic –≤—ã–ø–æ–ª–Ω–∏—Ç–µ —Å–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏: \n\n"
                     "1. –û—Ç–∫—Ä–æ–π—Ç–µ –ù–∞—Å—Ç—Ä–æ–π–∫–∏.\n"
                     "2. –í—ã–±–µ—Ä–∏—Ç–µ –ö–æ–Ω—Ñ–∏–¥–µ–Ω—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å.\n"
                     "3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ —Ä–∞–∑–¥–µ–ª –ê–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —É–ª—É—á—à–µ–Ω–∏—è.\n"
                     "4. –û—Ç–∫—Ä–æ–π—Ç–µ –î–∞–Ω–Ω—ã–µ –∞–Ω–∞–ª–∏—Ç–∏–∫–∏. \n\n"
                     "–ù–∞–π–¥–∏—Ç–µ –≤ —Å–ø–∏—Å–∫–µ —Ñ–∞–π–ª —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º panic-full –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –≥–¥–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –Ω–∞—à –±–æ—Ç. –î–ª—è —ç—Ç–æ–≥–æ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É –≤ –≤–µ—Ä—Ö–Ω–µ–º –ø—Ä–∞–≤–æ–º —É–≥–ª—É –∏ –≤—ã–±–µ—Ä–∏—Ç–µ AirDrop. \n\n"
                     "–í–∞–∂–Ω–æ: –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–∏–±–æ–ª–µ–µ —Ç–æ—á–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ñ–∞–π–ª–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Ñ–∞–π–ª–æ–≤ panic.\n",
                     locale=user.lang),
        reply_markup=Keyboards.back_to_home(i18n, user)
    )


@router.callback_query(HomeCallback.filter(F.action == "back_to_home"))
async def instruction(callback: CallbackQuery, user: User, i18n: I18n):
    await callback.message.edit_text(i18n.gettext("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{}üôÇü§ùüèº"
                                                  "\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–±–æ–µ–≤"
                                                  # "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨"
                                                  "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨",
                                                  locale=user.lang).format(user.username),
                                     reply_markup=Keyboards.home(i18n, user)
                                     )


@router.callback_query(LangChangeCallBack.filter(F.action == "change"))
async def instruction(callback: CallbackQuery, user: User, i18n: I18n):
    await callback.message.delete()
    await callback.message.answer(i18n.gettext("–í—ã–±–µ—Ä–∏—Ç–µ —è–∑—ã–∫", user.lang), reply_markup=Keyboards.lang(True))


@router.callback_query(LangChangeCallBack.filter(F.action == "changed"))
async def instruction(callback: CallbackQuery, callback_data: CallbackData, i18n: I18n, orm: ORM):
    user = await orm.user_repo.upsert_user(callback.from_user.id, lang=callback_data.lang)
    await callback.message.delete()
    await callback.message.answer(i18n.gettext("–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é @{}üôÇü§ùüèº"
                                               "\n–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —Å –∞–Ω–∞–ª–∏–∑–æ–º —Å–±–æ–µ–≤"
                                               # "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨"
                                               "\n–û—Ç–ø—Ä–∞–≤—å –º–Ω–µ —Ñ–∞–π–ª –∏ —è –µ–≥–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É—é üî¨",
                                               locale=user.lang).format(user.username),
                                  reply_markup=Keyboards.home(i18n, user)
                                  )


@router.inline_query(F.query.startswith('disk '))
async def find_disk(inq: InlineQuery):
    query = inq.query[5:]
    results = []
    if query:
        nand = NandList()
        models = nand.get_models()
        if query != '':
            models = list(filter(lambda x: x['name'].lower().find(query) != -1, models))
        for model in (models if len(models) < 50 else models[:50]):
            results.append(
                InlineQueryResultArticle(
                    id=str(model['row']),
                    title=f'{model["name"]}',
                    input_message_content=InputTextMessageContent(
                        message_text="/disk\n"
                                     "–î–∏—Å–∫ {}\n"
                                     "–ù–æ–º–µ—Ä: {}\n".format(model['name'], model['row']),
                        parse_mode=ParseMode.HTML
                    )
                )
            )
    await inq.answer(results=results, cache_time=10)


@router.message(Command("disk"))
async def find_command(message: Message, user: User, orm: ORM, i18n: I18n):
    model_name = message.text.split("\n")[1].split()[-1]
    model_row = message.text.split("\n")[2].split()[-1]

    nand = NandList()
    answer = nand.find_info(dict(name=model_name, row=model_row), user.lang)
    if answer:
        await message.answer(answer)
    else:
        await message.answer(i18n.gettext("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –¥–∞–Ω–Ω—ã–µ –ø–æ {} –Ω–µ –Ω–∞–π–¥–µ–Ω—ã", locale=user.lang).format(model_name))


@router.message(F.text == "alfinkly")
async def info(message: Message, user, i18n: I18n):
    await message.answer(i18n.gettext("–ú–æ–∏ —Å–æ–∑–¥–∞—Ç–µ–ª—å... –∂–∏–≤?", locale=user.lang))


@router.message(F.text == "dokuzu")
async def info(message: Message, user, i18n: I18n):
    await message.answer(i18n.gettext("–≠—Ç–æ –º–æ–π —Ö–æ–∑—è–∏–Ω!!!!", locale=user.lang))


@router.callback_query(F.data == "nothing")
async def nothing(callback: CallbackQuery):
    await callback.answer()
